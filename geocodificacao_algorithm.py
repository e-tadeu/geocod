# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Geocodificacao
                                 A QGIS plugin
 Este plugin automatiza a geocodificação de endereços dispostos em CSV e cria um shapefile deste pontos
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-11-18
        copyright            : (C) 2024 by Edson Tadeu da Silva Pinto
        email                : e.tadeu.eb@ime.eb.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Edson Tadeu da Silva Pinto'
__date__ = '2024-11-18'
__copyright__ = '(C) 2024 by Edson Tadeu da Silva Pinto'
__revision__ = '$Format:%H$'

import os
from qgis.core import (QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterField,
                       QgsProcessingParameterFile,
                       QgsVectorLayer,
                       QgsFeatureSink,
                       QgsFields,
                       QgsField,
                       QgsGeometry,
                       QgsPointXY,
                       QgsFeature,
                       QgsWkbTypes,
                       QgsCoordinateReferenceSystem)
from .geocoder_local import ArcgisQuery
import pandas as pd
from qgis.PyQt.QtCore import QVariant, QCoreApplication
from qgis.PyQt.QtGui import QIcon

import certifi
import os
os.environ['REQUESTS_CA_BUNDLE'] = certifi.where()

class GeocodificacaoAlgorithm(QgsProcessingAlgorithm):
    INPUT_CSV = 'INPUT_CSV'
    ADDRESS_FIELD = 'ADDRESS_FIELD'
    OUTPUT_LAYER = 'OUTPUT_LAYER'
    
    def initAlgorithm(self, config=None):
        # Parâmetro para o arquivo CSV
        self.addParameter(
            QgsProcessingParameterFile(
                self.INPUT_CSV,
                'Arquivo CSV com endereços',
                extension='csv'
            )
        )
        # Parâmetro para a coluna que contém os endereços
        self.addParameter(
            QgsProcessingParameterField(
                self.ADDRESS_FIELD,
                'Coluna de endereços',
                parentLayerParameterName=self.INPUT_CSV,
                type=QgsProcessingParameterField.String
            )
        )
        # Saída como camada vetorial
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_LAYER,
                self.tr('Geocoded Points')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        # Obter o arquivo CSV de entrada
        input_csv = self.parameterAsFile(parameters, self.INPUT_CSV, context)
        address_field = self.parameterAsString(parameters, self.ADDRESS_FIELD, context)
        
        # Criar uma nova camada de saída de pontos
        crs = QgsCoordinateReferenceSystem("EPSG:4326")  # WGS 84
        output_layer = QgsVectorLayer(f"Point?crs={crs.authid()}", "Geocoded Points", "memory")
        output_layer_pr = output_layer.dataProvider()

        # Definir campos para a camada de saída
        fields = QgsFields()
        fields.append(QgsField("address", QVariant.String))
        fields.append(QgsField("latitude", QVariant.Double))
        fields.append(QgsField("longitude", QVariant.Double))
        output_layer_pr.addAttributes(fields)
        output_layer.updateFields()

        (sink, dest_id) = self.parameterAsSink(parameters, 
                                self.OUTPUT_LAYER,
                                context,
                                output_layer.fields(),
                                QgsWkbTypes.Point,
                                output_layer.sourceCrs())

        # Leitura do arquivo CSV com pandas
        feedback.setProgressText('Carregando o arquivo CSV...')
        data = pd.read_csv(input_csv)

        total = 100.0 / len(data) if len(data) > 0 else 0

        # Processamento de cada endereço na coluna selecionada
        feedback.setProgressText('Processando os endereços...')
        for index, row in data.iterrows():
            address = row[address_field]

            if not isinstance(address, str) or not address.strip():
                feedback.pushInfo(f"\nEndereço vazio na linha {index + 1}, ignorado.")
                continue
            
            # Geocodificação do endereço
            location = ArcgisQuery(address)
            if location and location.latlng:
                lat, lng = location.latlng
                feedback.pushInfo(f"\nO endereço {address} possui as coordenadas {lat}, {lng}.")
                # Criar uma nova feição de ponto
                feature = QgsFeature()
                feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(lng, lat)))
                feature.setAttributes([address, lat, lng])
                output_layer_pr.addFeature(feature)
            else:
                feedback.pushInfo(f"\nNão foi possível geocodificar o endereço: {address}")
            
            feedback.setProgress(int((index + 1) * total))

        # Atualização da camada de saída
        output_layer.updateExtents()

        # Adição das feições na camada output
        for feat in output_layer.getFeatures():
            sink.addFeature(feat, QgsFeatureSink.FastInsert)
        
        return {self.OUTPUT_LAYER: output_layer}

    def name(self):
        return 'Geocoding'

    def displayName(self):
        return self.tr(self.name())

    def group(self):
        return self.tr(self.groupId())

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return GeocodificacaoAlgorithm()
    
    def icon(self):
        return QIcon(os.path.join(os.path.dirname(__file__), 'geocod.jfif'))
